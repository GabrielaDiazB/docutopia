/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ReferenceIndexImport } from "./routes/reference/index";
import { Route as ReferenceApiurlImport } from "./routes/reference/$api_url";

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const ReferenceIndexRoute = ReferenceIndexImport.update({
	id: "/reference/",
	path: "/reference/",
	getParentRoute: () => rootRoute,
} as any);

const ReferenceApiurlRoute = ReferenceApiurlImport.update({
	id: "/reference/$api_url",
	path: "/reference/$api_url",
	getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexLazyImport;
			parentRoute: typeof rootRoute;
		};
		"/reference/$api_url": {
			id: "/reference/$api_url";
			path: "/reference/$api_url";
			fullPath: "/reference/$api_url";
			preLoaderRoute: typeof ReferenceApiurlImport;
			parentRoute: typeof rootRoute;
		};
		"/reference/": {
			id: "/reference/";
			path: "/reference";
			fullPath: "/reference";
			preLoaderRoute: typeof ReferenceIndexImport;
			parentRoute: typeof rootRoute;
		};
	}
}

// Create and export the route tree

export interface FileRoutesByFullPath {
	"/": typeof IndexLazyRoute;
	"/reference/$api_url": typeof ReferenceApiurlRoute;
	"/reference": typeof ReferenceIndexRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexLazyRoute;
	"/reference/$api_url": typeof ReferenceApiurlRoute;
	"/reference": typeof ReferenceIndexRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexLazyRoute;
	"/reference/$api_url": typeof ReferenceApiurlRoute;
	"/reference/": typeof ReferenceIndexRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/reference/$api_url" | "/reference";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/reference/$api_url" | "/reference";
	id: "__root__" | "/" | "/reference/$api_url" | "/reference/";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexLazyRoute: typeof IndexLazyRoute;
	ReferenceApiurlRoute: typeof ReferenceApiurlRoute;
	ReferenceIndexRoute: typeof ReferenceIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexLazyRoute: IndexLazyRoute,
	ReferenceApiurlRoute: ReferenceApiurlRoute,
	ReferenceIndexRoute: ReferenceIndexRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/reference/$api_url",
        "/reference/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/reference/$api_url": {
      "filePath": "reference/$api_url.tsx"
    },
    "/reference/": {
      "filePath": "reference/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
